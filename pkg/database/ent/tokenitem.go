// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/tokenitem"
)

// TokenItem is the model entity for the TokenItem schema.
type TokenItem struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at"`
	// Name holds the value of the "name" field.
	Name string `json:"name"`
	// Value holds the value of the "value" field.
	Value        string `json:"value"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TokenItem) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tokenitem.FieldID:
			values[i] = new(sql.NullInt64)
		case tokenitem.FieldName, tokenitem.FieldValue:
			values[i] = new(sql.NullString)
		case tokenitem.FieldCreatedAt, tokenitem.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TokenItem fields.
func (ti *TokenItem) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tokenitem.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ti.ID = int(value.Int64)
		case tokenitem.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ti.CreatedAt = value.Time
			}
		case tokenitem.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ti.UpdatedAt = value.Time
			}
		case tokenitem.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ti.Name = value.String
			}
		case tokenitem.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ti.Value = value.String
			}
		default:
			ti.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the TokenItem.
// This includes values selected through modifiers, order, etc.
func (ti *TokenItem) GetValue(name string) (ent.Value, error) {
	return ti.selectValues.Get(name)
}

// Update returns a builder for updating this TokenItem.
// Note that you need to call TokenItem.Unwrap() before calling this method if this TokenItem
// was returned from a transaction, and the transaction was committed or rolled back.
func (ti *TokenItem) Update() *TokenItemUpdateOne {
	return NewTokenItemClient(ti.config).UpdateOne(ti)
}

// Unwrap unwraps the TokenItem entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ti *TokenItem) Unwrap() *TokenItem {
	_tx, ok := ti.config.driver.(*txDriver)
	if !ok {
		panic("ent: TokenItem is not a transactional entity")
	}
	ti.config.driver = _tx.drv
	return ti
}

// String implements the fmt.Stringer.
func (ti *TokenItem) String() string {
	var builder strings.Builder
	builder.WriteString("TokenItem(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ti.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ti.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ti.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ti.Name)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(ti.Value)
	builder.WriteByte(')')
	return builder.String()
}

// TokenItems is a parsable slice of TokenItem.
type TokenItems []*TokenItem
