// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/apicauth"
)

// ApicAuthCreate is the builder for creating a ApicAuth entity.
type ApicAuthCreate struct {
	config
	mutation *ApicAuthMutation
	hooks    []Hook
}

// SetToken sets the "token" field.
func (aac *ApicAuthCreate) SetToken(s string) *ApicAuthCreate {
	aac.mutation.SetToken(s)
	return aac
}

// SetExpiration sets the "expiration" field.
func (aac *ApicAuthCreate) SetExpiration(t time.Time) *ApicAuthCreate {
	aac.mutation.SetExpiration(t)
	return aac
}

// SetSingleton sets the "singleton" field.
func (aac *ApicAuthCreate) SetSingleton(s string) *ApicAuthCreate {
	aac.mutation.SetSingleton(s)
	return aac
}

// Mutation returns the ApicAuthMutation object of the builder.
func (aac *ApicAuthCreate) Mutation() *ApicAuthMutation {
	return aac.mutation
}

// Save creates the ApicAuth in the database.
func (aac *ApicAuthCreate) Save(ctx context.Context) (*ApicAuth, error) {
	return withHooks(ctx, aac.sqlSave, aac.mutation, aac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aac *ApicAuthCreate) SaveX(ctx context.Context) *ApicAuth {
	v, err := aac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aac *ApicAuthCreate) Exec(ctx context.Context) error {
	_, err := aac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aac *ApicAuthCreate) ExecX(ctx context.Context) {
	if err := aac.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aac *ApicAuthCreate) check() error {
	if _, ok := aac.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`ent: missing required field "ApicAuth.token"`)}
	}
	if v, ok := aac.mutation.Token(); ok {
		if err := apicauth.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "ApicAuth.token": %w`, err)}
		}
	}
	if _, ok := aac.mutation.Expiration(); !ok {
		return &ValidationError{Name: "expiration", err: errors.New(`ent: missing required field "ApicAuth.expiration"`)}
	}
	if _, ok := aac.mutation.Singleton(); !ok {
		return &ValidationError{Name: "singleton", err: errors.New(`ent: missing required field "ApicAuth.singleton"`)}
	}
	return nil
}

func (aac *ApicAuthCreate) sqlSave(ctx context.Context) (*ApicAuth, error) {
	if err := aac.check(); err != nil {
		return nil, err
	}
	_node, _spec := aac.createSpec()
	if err := sqlgraph.CreateNode(ctx, aac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	aac.mutation.id = &_node.ID
	aac.mutation.done = true
	return _node, nil
}

func (aac *ApicAuthCreate) createSpec() (*ApicAuth, *sqlgraph.CreateSpec) {
	var (
		_node = &ApicAuth{config: aac.config}
		_spec = sqlgraph.NewCreateSpec(apicauth.Table, sqlgraph.NewFieldSpec(apicauth.FieldID, field.TypeInt))
	)
	if value, ok := aac.mutation.Token(); ok {
		_spec.SetField(apicauth.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := aac.mutation.Expiration(); ok {
		_spec.SetField(apicauth.FieldExpiration, field.TypeTime, value)
		_node.Expiration = value
	}
	if value, ok := aac.mutation.Singleton(); ok {
		_spec.SetField(apicauth.FieldSingleton, field.TypeString, value)
		_node.Singleton = value
	}
	return _node, _spec
}

// ApicAuthCreateBulk is the builder for creating many ApicAuth entities in bulk.
type ApicAuthCreateBulk struct {
	config
	err      error
	builders []*ApicAuthCreate
}

// Save creates the ApicAuth entities in the database.
func (aacb *ApicAuthCreateBulk) Save(ctx context.Context) ([]*ApicAuth, error) {
	if aacb.err != nil {
		return nil, aacb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aacb.builders))
	nodes := make([]*ApicAuth, len(aacb.builders))
	mutators := make([]Mutator, len(aacb.builders))
	for i := range aacb.builders {
		func(i int, root context.Context) {
			builder := aacb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ApicAuthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aacb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aacb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aacb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aacb *ApicAuthCreateBulk) SaveX(ctx context.Context) []*ApicAuth {
	v, err := aacb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aacb *ApicAuthCreateBulk) Exec(ctx context.Context) error {
	_, err := aacb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aacb *ApicAuthCreateBulk) ExecX(ctx context.Context) {
	if err := aacb.Exec(ctx); err != nil {
		panic(err)
	}
}
