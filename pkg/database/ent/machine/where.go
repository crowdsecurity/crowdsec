// Code generated by ent, DO NOT EDIT.

package machine

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldUpdatedAt, v))
}

// LastPush applies equality check predicate on the "last_push" field. It's identical to LastPushEQ.
func LastPush(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldLastPush, v))
}

// LastHeartbeat applies equality check predicate on the "last_heartbeat" field. It's identical to LastHeartbeatEQ.
func LastHeartbeat(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldLastHeartbeat, v))
}

// MachineId applies equality check predicate on the "machineId" field. It's identical to MachineIdEQ.
func MachineId(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldMachineId, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldPassword, v))
}

// IpAddress applies equality check predicate on the "ipAddress" field. It's identical to IpAddressEQ.
func IpAddress(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldIpAddress, v))
}

// Scenarios applies equality check predicate on the "scenarios" field. It's identical to ScenariosEQ.
func Scenarios(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldScenarios, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldVersion, v))
}

// IsValidated applies equality check predicate on the "isValidated" field. It's identical to IsValidatedEQ.
func IsValidated(v bool) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldIsValidated, v))
}

// AuthType applies equality check predicate on the "auth_type" field. It's identical to AuthTypeEQ.
func AuthType(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldAuthType, v))
}

// Osname applies equality check predicate on the "osname" field. It's identical to OsnameEQ.
func Osname(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldOsname, v))
}

// Osversion applies equality check predicate on the "osversion" field. It's identical to OsversionEQ.
func Osversion(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldOsversion, v))
}

// Featureflags applies equality check predicate on the "featureflags" field. It's identical to FeatureflagsEQ.
func Featureflags(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldFeatureflags, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldUpdatedAt, v))
}

// LastPushEQ applies the EQ predicate on the "last_push" field.
func LastPushEQ(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldLastPush, v))
}

// LastPushNEQ applies the NEQ predicate on the "last_push" field.
func LastPushNEQ(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldLastPush, v))
}

// LastPushIn applies the In predicate on the "last_push" field.
func LastPushIn(vs ...time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldLastPush, vs...))
}

// LastPushNotIn applies the NotIn predicate on the "last_push" field.
func LastPushNotIn(vs ...time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldLastPush, vs...))
}

// LastPushGT applies the GT predicate on the "last_push" field.
func LastPushGT(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldLastPush, v))
}

// LastPushGTE applies the GTE predicate on the "last_push" field.
func LastPushGTE(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldLastPush, v))
}

// LastPushLT applies the LT predicate on the "last_push" field.
func LastPushLT(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldLastPush, v))
}

// LastPushLTE applies the LTE predicate on the "last_push" field.
func LastPushLTE(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldLastPush, v))
}

// LastPushIsNil applies the IsNil predicate on the "last_push" field.
func LastPushIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldLastPush))
}

// LastPushNotNil applies the NotNil predicate on the "last_push" field.
func LastPushNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldLastPush))
}

// LastHeartbeatEQ applies the EQ predicate on the "last_heartbeat" field.
func LastHeartbeatEQ(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatNEQ applies the NEQ predicate on the "last_heartbeat" field.
func LastHeartbeatNEQ(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldLastHeartbeat, v))
}

// LastHeartbeatIn applies the In predicate on the "last_heartbeat" field.
func LastHeartbeatIn(vs ...time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatNotIn applies the NotIn predicate on the "last_heartbeat" field.
func LastHeartbeatNotIn(vs ...time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldLastHeartbeat, vs...))
}

// LastHeartbeatGT applies the GT predicate on the "last_heartbeat" field.
func LastHeartbeatGT(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldLastHeartbeat, v))
}

// LastHeartbeatGTE applies the GTE predicate on the "last_heartbeat" field.
func LastHeartbeatGTE(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldLastHeartbeat, v))
}

// LastHeartbeatLT applies the LT predicate on the "last_heartbeat" field.
func LastHeartbeatLT(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldLastHeartbeat, v))
}

// LastHeartbeatLTE applies the LTE predicate on the "last_heartbeat" field.
func LastHeartbeatLTE(v time.Time) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldLastHeartbeat, v))
}

// LastHeartbeatIsNil applies the IsNil predicate on the "last_heartbeat" field.
func LastHeartbeatIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldLastHeartbeat))
}

// LastHeartbeatNotNil applies the NotNil predicate on the "last_heartbeat" field.
func LastHeartbeatNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldLastHeartbeat))
}

// MachineIdEQ applies the EQ predicate on the "machineId" field.
func MachineIdEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldMachineId, v))
}

// MachineIdNEQ applies the NEQ predicate on the "machineId" field.
func MachineIdNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldMachineId, v))
}

// MachineIdIn applies the In predicate on the "machineId" field.
func MachineIdIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldMachineId, vs...))
}

// MachineIdNotIn applies the NotIn predicate on the "machineId" field.
func MachineIdNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldMachineId, vs...))
}

// MachineIdGT applies the GT predicate on the "machineId" field.
func MachineIdGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldMachineId, v))
}

// MachineIdGTE applies the GTE predicate on the "machineId" field.
func MachineIdGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldMachineId, v))
}

// MachineIdLT applies the LT predicate on the "machineId" field.
func MachineIdLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldMachineId, v))
}

// MachineIdLTE applies the LTE predicate on the "machineId" field.
func MachineIdLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldMachineId, v))
}

// MachineIdContains applies the Contains predicate on the "machineId" field.
func MachineIdContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldMachineId, v))
}

// MachineIdHasPrefix applies the HasPrefix predicate on the "machineId" field.
func MachineIdHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldMachineId, v))
}

// MachineIdHasSuffix applies the HasSuffix predicate on the "machineId" field.
func MachineIdHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldMachineId, v))
}

// MachineIdEqualFold applies the EqualFold predicate on the "machineId" field.
func MachineIdEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldMachineId, v))
}

// MachineIdContainsFold applies the ContainsFold predicate on the "machineId" field.
func MachineIdContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldMachineId, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldPassword, v))
}

// IpAddressEQ applies the EQ predicate on the "ipAddress" field.
func IpAddressEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldIpAddress, v))
}

// IpAddressNEQ applies the NEQ predicate on the "ipAddress" field.
func IpAddressNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldIpAddress, v))
}

// IpAddressIn applies the In predicate on the "ipAddress" field.
func IpAddressIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldIpAddress, vs...))
}

// IpAddressNotIn applies the NotIn predicate on the "ipAddress" field.
func IpAddressNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldIpAddress, vs...))
}

// IpAddressGT applies the GT predicate on the "ipAddress" field.
func IpAddressGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldIpAddress, v))
}

// IpAddressGTE applies the GTE predicate on the "ipAddress" field.
func IpAddressGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldIpAddress, v))
}

// IpAddressLT applies the LT predicate on the "ipAddress" field.
func IpAddressLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldIpAddress, v))
}

// IpAddressLTE applies the LTE predicate on the "ipAddress" field.
func IpAddressLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldIpAddress, v))
}

// IpAddressContains applies the Contains predicate on the "ipAddress" field.
func IpAddressContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldIpAddress, v))
}

// IpAddressHasPrefix applies the HasPrefix predicate on the "ipAddress" field.
func IpAddressHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldIpAddress, v))
}

// IpAddressHasSuffix applies the HasSuffix predicate on the "ipAddress" field.
func IpAddressHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldIpAddress, v))
}

// IpAddressEqualFold applies the EqualFold predicate on the "ipAddress" field.
func IpAddressEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldIpAddress, v))
}

// IpAddressContainsFold applies the ContainsFold predicate on the "ipAddress" field.
func IpAddressContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldIpAddress, v))
}

// ScenariosEQ applies the EQ predicate on the "scenarios" field.
func ScenariosEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldScenarios, v))
}

// ScenariosNEQ applies the NEQ predicate on the "scenarios" field.
func ScenariosNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldScenarios, v))
}

// ScenariosIn applies the In predicate on the "scenarios" field.
func ScenariosIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldScenarios, vs...))
}

// ScenariosNotIn applies the NotIn predicate on the "scenarios" field.
func ScenariosNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldScenarios, vs...))
}

// ScenariosGT applies the GT predicate on the "scenarios" field.
func ScenariosGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldScenarios, v))
}

// ScenariosGTE applies the GTE predicate on the "scenarios" field.
func ScenariosGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldScenarios, v))
}

// ScenariosLT applies the LT predicate on the "scenarios" field.
func ScenariosLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldScenarios, v))
}

// ScenariosLTE applies the LTE predicate on the "scenarios" field.
func ScenariosLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldScenarios, v))
}

// ScenariosContains applies the Contains predicate on the "scenarios" field.
func ScenariosContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldScenarios, v))
}

// ScenariosHasPrefix applies the HasPrefix predicate on the "scenarios" field.
func ScenariosHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldScenarios, v))
}

// ScenariosHasSuffix applies the HasSuffix predicate on the "scenarios" field.
func ScenariosHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldScenarios, v))
}

// ScenariosIsNil applies the IsNil predicate on the "scenarios" field.
func ScenariosIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldScenarios))
}

// ScenariosNotNil applies the NotNil predicate on the "scenarios" field.
func ScenariosNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldScenarios))
}

// ScenariosEqualFold applies the EqualFold predicate on the "scenarios" field.
func ScenariosEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldScenarios, v))
}

// ScenariosContainsFold applies the ContainsFold predicate on the "scenarios" field.
func ScenariosContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldScenarios, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldVersion))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldVersion, v))
}

// IsValidatedEQ applies the EQ predicate on the "isValidated" field.
func IsValidatedEQ(v bool) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldIsValidated, v))
}

// IsValidatedNEQ applies the NEQ predicate on the "isValidated" field.
func IsValidatedNEQ(v bool) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldIsValidated, v))
}

// AuthTypeEQ applies the EQ predicate on the "auth_type" field.
func AuthTypeEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldAuthType, v))
}

// AuthTypeNEQ applies the NEQ predicate on the "auth_type" field.
func AuthTypeNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldAuthType, v))
}

// AuthTypeIn applies the In predicate on the "auth_type" field.
func AuthTypeIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldAuthType, vs...))
}

// AuthTypeNotIn applies the NotIn predicate on the "auth_type" field.
func AuthTypeNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldAuthType, vs...))
}

// AuthTypeGT applies the GT predicate on the "auth_type" field.
func AuthTypeGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldAuthType, v))
}

// AuthTypeGTE applies the GTE predicate on the "auth_type" field.
func AuthTypeGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldAuthType, v))
}

// AuthTypeLT applies the LT predicate on the "auth_type" field.
func AuthTypeLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldAuthType, v))
}

// AuthTypeLTE applies the LTE predicate on the "auth_type" field.
func AuthTypeLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldAuthType, v))
}

// AuthTypeContains applies the Contains predicate on the "auth_type" field.
func AuthTypeContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldAuthType, v))
}

// AuthTypeHasPrefix applies the HasPrefix predicate on the "auth_type" field.
func AuthTypeHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldAuthType, v))
}

// AuthTypeHasSuffix applies the HasSuffix predicate on the "auth_type" field.
func AuthTypeHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldAuthType, v))
}

// AuthTypeEqualFold applies the EqualFold predicate on the "auth_type" field.
func AuthTypeEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldAuthType, v))
}

// AuthTypeContainsFold applies the ContainsFold predicate on the "auth_type" field.
func AuthTypeContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldAuthType, v))
}

// OsnameEQ applies the EQ predicate on the "osname" field.
func OsnameEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldOsname, v))
}

// OsnameNEQ applies the NEQ predicate on the "osname" field.
func OsnameNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldOsname, v))
}

// OsnameIn applies the In predicate on the "osname" field.
func OsnameIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldOsname, vs...))
}

// OsnameNotIn applies the NotIn predicate on the "osname" field.
func OsnameNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldOsname, vs...))
}

// OsnameGT applies the GT predicate on the "osname" field.
func OsnameGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldOsname, v))
}

// OsnameGTE applies the GTE predicate on the "osname" field.
func OsnameGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldOsname, v))
}

// OsnameLT applies the LT predicate on the "osname" field.
func OsnameLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldOsname, v))
}

// OsnameLTE applies the LTE predicate on the "osname" field.
func OsnameLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldOsname, v))
}

// OsnameContains applies the Contains predicate on the "osname" field.
func OsnameContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldOsname, v))
}

// OsnameHasPrefix applies the HasPrefix predicate on the "osname" field.
func OsnameHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldOsname, v))
}

// OsnameHasSuffix applies the HasSuffix predicate on the "osname" field.
func OsnameHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldOsname, v))
}

// OsnameIsNil applies the IsNil predicate on the "osname" field.
func OsnameIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldOsname))
}

// OsnameNotNil applies the NotNil predicate on the "osname" field.
func OsnameNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldOsname))
}

// OsnameEqualFold applies the EqualFold predicate on the "osname" field.
func OsnameEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldOsname, v))
}

// OsnameContainsFold applies the ContainsFold predicate on the "osname" field.
func OsnameContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldOsname, v))
}

// OsversionEQ applies the EQ predicate on the "osversion" field.
func OsversionEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldOsversion, v))
}

// OsversionNEQ applies the NEQ predicate on the "osversion" field.
func OsversionNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldOsversion, v))
}

// OsversionIn applies the In predicate on the "osversion" field.
func OsversionIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldOsversion, vs...))
}

// OsversionNotIn applies the NotIn predicate on the "osversion" field.
func OsversionNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldOsversion, vs...))
}

// OsversionGT applies the GT predicate on the "osversion" field.
func OsversionGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldOsversion, v))
}

// OsversionGTE applies the GTE predicate on the "osversion" field.
func OsversionGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldOsversion, v))
}

// OsversionLT applies the LT predicate on the "osversion" field.
func OsversionLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldOsversion, v))
}

// OsversionLTE applies the LTE predicate on the "osversion" field.
func OsversionLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldOsversion, v))
}

// OsversionContains applies the Contains predicate on the "osversion" field.
func OsversionContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldOsversion, v))
}

// OsversionHasPrefix applies the HasPrefix predicate on the "osversion" field.
func OsversionHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldOsversion, v))
}

// OsversionHasSuffix applies the HasSuffix predicate on the "osversion" field.
func OsversionHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldOsversion, v))
}

// OsversionIsNil applies the IsNil predicate on the "osversion" field.
func OsversionIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldOsversion))
}

// OsversionNotNil applies the NotNil predicate on the "osversion" field.
func OsversionNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldOsversion))
}

// OsversionEqualFold applies the EqualFold predicate on the "osversion" field.
func OsversionEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldOsversion, v))
}

// OsversionContainsFold applies the ContainsFold predicate on the "osversion" field.
func OsversionContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldOsversion, v))
}

// FeatureflagsEQ applies the EQ predicate on the "featureflags" field.
func FeatureflagsEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEQ(FieldFeatureflags, v))
}

// FeatureflagsNEQ applies the NEQ predicate on the "featureflags" field.
func FeatureflagsNEQ(v string) predicate.Machine {
	return predicate.Machine(sql.FieldNEQ(FieldFeatureflags, v))
}

// FeatureflagsIn applies the In predicate on the "featureflags" field.
func FeatureflagsIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldIn(FieldFeatureflags, vs...))
}

// FeatureflagsNotIn applies the NotIn predicate on the "featureflags" field.
func FeatureflagsNotIn(vs ...string) predicate.Machine {
	return predicate.Machine(sql.FieldNotIn(FieldFeatureflags, vs...))
}

// FeatureflagsGT applies the GT predicate on the "featureflags" field.
func FeatureflagsGT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGT(FieldFeatureflags, v))
}

// FeatureflagsGTE applies the GTE predicate on the "featureflags" field.
func FeatureflagsGTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldGTE(FieldFeatureflags, v))
}

// FeatureflagsLT applies the LT predicate on the "featureflags" field.
func FeatureflagsLT(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLT(FieldFeatureflags, v))
}

// FeatureflagsLTE applies the LTE predicate on the "featureflags" field.
func FeatureflagsLTE(v string) predicate.Machine {
	return predicate.Machine(sql.FieldLTE(FieldFeatureflags, v))
}

// FeatureflagsContains applies the Contains predicate on the "featureflags" field.
func FeatureflagsContains(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContains(FieldFeatureflags, v))
}

// FeatureflagsHasPrefix applies the HasPrefix predicate on the "featureflags" field.
func FeatureflagsHasPrefix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasPrefix(FieldFeatureflags, v))
}

// FeatureflagsHasSuffix applies the HasSuffix predicate on the "featureflags" field.
func FeatureflagsHasSuffix(v string) predicate.Machine {
	return predicate.Machine(sql.FieldHasSuffix(FieldFeatureflags, v))
}

// FeatureflagsIsNil applies the IsNil predicate on the "featureflags" field.
func FeatureflagsIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldFeatureflags))
}

// FeatureflagsNotNil applies the NotNil predicate on the "featureflags" field.
func FeatureflagsNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldFeatureflags))
}

// FeatureflagsEqualFold applies the EqualFold predicate on the "featureflags" field.
func FeatureflagsEqualFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldEqualFold(FieldFeatureflags, v))
}

// FeatureflagsContainsFold applies the ContainsFold predicate on the "featureflags" field.
func FeatureflagsContainsFold(v string) predicate.Machine {
	return predicate.Machine(sql.FieldContainsFold(FieldFeatureflags, v))
}

// HubstateIsNil applies the IsNil predicate on the "hubstate" field.
func HubstateIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldHubstate))
}

// HubstateNotNil applies the NotNil predicate on the "hubstate" field.
func HubstateNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldHubstate))
}

// DatasourcesIsNil applies the IsNil predicate on the "datasources" field.
func DatasourcesIsNil() predicate.Machine {
	return predicate.Machine(sql.FieldIsNull(FieldDatasources))
}

// DatasourcesNotNil applies the NotNil predicate on the "datasources" field.
func DatasourcesNotNil() predicate.Machine {
	return predicate.Machine(sql.FieldNotNull(FieldDatasources))
}

// HasAlerts applies the HasEdge predicate on the "alerts" edge.
func HasAlerts() predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AlertsTable, AlertsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAlertsWith applies the HasEdge predicate on the "alerts" edge with a given conditions (other predicates).
func HasAlertsWith(preds ...predicate.Alert) predicate.Machine {
	return predicate.Machine(func(s *sql.Selector) {
		step := newAlertsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Machine) predicate.Machine {
	return predicate.Machine(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Machine) predicate.Machine {
	return predicate.Machine(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Machine) predicate.Machine {
	return predicate.Machine(sql.NotPredicates(p))
}
