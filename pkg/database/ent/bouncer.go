// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/crowdsecurity/crowdsec/pkg/database/ent/bouncer"
	"github.com/facebook/ent/dialect/sql"
)

// Bouncer is the model entity for the Bouncer schema.
type Bouncer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey string `json:"api_key,omitempty"`
	// Revoked holds the value of the "revoked" field.
	Revoked bool `json:"revoked,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Until holds the value of the "until" field.
	Until time.Time `json:"until,omitempty"`
	// LastPull holds the value of the "last_pull" field.
	LastPull time.Time `json:"last_pull,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bouncer) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // name
		&sql.NullString{}, // api_key
		&sql.NullBool{},   // revoked
		&sql.NullString{}, // ip_address
		&sql.NullString{}, // type
		&sql.NullString{}, // version
		&sql.NullTime{},   // until
		&sql.NullTime{},   // last_pull
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bouncer fields.
func (b *Bouncer) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bouncer.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		b.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		b.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		b.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field api_key", values[3])
	} else if value.Valid {
		b.APIKey = value.String
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field revoked", values[4])
	} else if value.Valid {
		b.Revoked = value.Bool
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ip_address", values[5])
	} else if value.Valid {
		b.IPAddress = value.String
	}
	if value, ok := values[6].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[6])
	} else if value.Valid {
		b.Type = value.String
	}
	if value, ok := values[7].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field version", values[7])
	} else if value.Valid {
		b.Version = value.String
	}
	if value, ok := values[8].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field until", values[8])
	} else if value.Valid {
		b.Until = value.Time
	}
	if value, ok := values[9].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field last_pull", values[9])
	} else if value.Valid {
		b.LastPull = value.Time
	}
	return nil
}

// Update returns a builder for updating this Bouncer.
// Note that, you need to call Bouncer.Unwrap() before calling this method, if this Bouncer
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bouncer) Update() *BouncerUpdateOne {
	return (&BouncerClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bouncer) Unwrap() *Bouncer {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bouncer is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bouncer) String() string {
	var builder strings.Builder
	builder.WriteString("Bouncer(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteString(", api_key=")
	builder.WriteString(b.APIKey)
	builder.WriteString(", revoked=")
	builder.WriteString(fmt.Sprintf("%v", b.Revoked))
	builder.WriteString(", ip_address=")
	builder.WriteString(b.IPAddress)
	builder.WriteString(", type=")
	builder.WriteString(b.Type)
	builder.WriteString(", version=")
	builder.WriteString(b.Version)
	builder.WriteString(", until=")
	builder.WriteString(b.Until.Format(time.ANSIC))
	builder.WriteString(", last_pull=")
	builder.WriteString(b.LastPull.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Bouncers is a parsable slice of Bouncer.
type Bouncers []*Bouncer

func (b Bouncers) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
