// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/crowdsecurity/crowdsec/pkg/database/ent/blocker"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BlockerCreate is the builder for creating a Blocker entity.
type BlockerCreate struct {
	config
	mutation *BlockerMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (bc *BlockerCreate) SetCreatedAt(t time.Time) *BlockerCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (bc *BlockerCreate) SetNillableCreatedAt(t *time.Time) *BlockerCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the updated_at field.
func (bc *BlockerCreate) SetUpdatedAt(t time.Time) *BlockerCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (bc *BlockerCreate) SetNillableUpdatedAt(t *time.Time) *BlockerCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetName sets the name field.
func (bc *BlockerCreate) SetName(s string) *BlockerCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetAPIKey sets the api_key field.
func (bc *BlockerCreate) SetAPIKey(s string) *BlockerCreate {
	bc.mutation.SetAPIKey(s)
	return bc
}

// SetRevoked sets the revoked field.
func (bc *BlockerCreate) SetRevoked(b bool) *BlockerCreate {
	bc.mutation.SetRevoked(b)
	return bc
}

// SetIPAddress sets the ip_address field.
func (bc *BlockerCreate) SetIPAddress(s string) *BlockerCreate {
	bc.mutation.SetIPAddress(s)
	return bc
}

// SetNillableIPAddress sets the ip_address field if the given value is not nil.
func (bc *BlockerCreate) SetNillableIPAddress(s *string) *BlockerCreate {
	if s != nil {
		bc.SetIPAddress(*s)
	}
	return bc
}

// SetType sets the type field.
func (bc *BlockerCreate) SetType(s string) *BlockerCreate {
	bc.mutation.SetType(s)
	return bc
}

// SetNillableType sets the type field if the given value is not nil.
func (bc *BlockerCreate) SetNillableType(s *string) *BlockerCreate {
	if s != nil {
		bc.SetType(*s)
	}
	return bc
}

// SetUntil sets the until field.
func (bc *BlockerCreate) SetUntil(t time.Time) *BlockerCreate {
	bc.mutation.SetUntil(t)
	return bc
}

// SetNillableUntil sets the until field if the given value is not nil.
func (bc *BlockerCreate) SetNillableUntil(t *time.Time) *BlockerCreate {
	if t != nil {
		bc.SetUntil(*t)
	}
	return bc
}

// SetLastPull sets the last_pull field.
func (bc *BlockerCreate) SetLastPull(t time.Time) *BlockerCreate {
	bc.mutation.SetLastPull(t)
	return bc
}

// SetNillableLastPull sets the last_pull field if the given value is not nil.
func (bc *BlockerCreate) SetNillableLastPull(t *time.Time) *BlockerCreate {
	if t != nil {
		bc.SetLastPull(*t)
	}
	return bc
}

// Mutation returns the BlockerMutation object of the builder.
func (bc *BlockerCreate) Mutation() *BlockerMutation {
	return bc.mutation
}

// Save creates the Blocker in the database.
func (bc *BlockerCreate) Save(ctx context.Context) (*Blocker, error) {
	var (
		err  error
		node *Blocker
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BlockerCreate) SaveX(ctx context.Context) *Blocker {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (bc *BlockerCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := blocker.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := blocker.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.IPAddress(); !ok {
		v := blocker.DefaultIPAddress
		bc.mutation.SetIPAddress(v)
	}
	if _, ok := bc.mutation.GetType(); !ok {
		v := blocker.DefaultType
		bc.mutation.SetType(v)
	}
	if _, ok := bc.mutation.Until(); !ok {
		v := blocker.DefaultUntil()
		bc.mutation.SetUntil(v)
	}
	if _, ok := bc.mutation.LastPull(); !ok {
		v := blocker.DefaultLastPull()
		bc.mutation.SetLastPull(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BlockerCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New("ent: missing required field \"updated_at\"")}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := bc.mutation.APIKey(); !ok {
		return &ValidationError{Name: "api_key", err: errors.New("ent: missing required field \"api_key\"")}
	}
	if _, ok := bc.mutation.Revoked(); !ok {
		return &ValidationError{Name: "revoked", err: errors.New("ent: missing required field \"revoked\"")}
	}
	if _, ok := bc.mutation.LastPull(); !ok {
		return &ValidationError{Name: "last_pull", err: errors.New("ent: missing required field \"last_pull\"")}
	}
	return nil
}

func (bc *BlockerCreate) sqlSave(ctx context.Context) (*Blocker, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BlockerCreate) createSpec() (*Blocker, *sqlgraph.CreateSpec) {
	var (
		_node = &Blocker{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: blocker.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocker.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bc.mutation.APIKey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldAPIKey,
		})
		_node.APIKey = value
	}
	if value, ok := bc.mutation.Revoked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: blocker.FieldRevoked,
		})
		_node.Revoked = value
	}
	if value, ok := bc.mutation.IPAddress(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldIPAddress,
		})
		_node.IPAddress = value
	}
	if value, ok := bc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldType,
		})
		_node.Type = value
	}
	if value, ok := bc.mutation.Until(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldUntil,
		})
		_node.Until = value
	}
	if value, ok := bc.mutation.LastPull(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldLastPull,
		})
		_node.LastPull = value
	}
	return _node, _spec
}

// BlockerCreateBulk is the builder for creating a bulk of Blocker entities.
type BlockerCreateBulk struct {
	config
	builders []*BlockerCreate
}

// Save creates the Blocker entities in the database.
func (bcb *BlockerCreateBulk) Save(ctx context.Context) ([]*Blocker, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Blocker, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BlockerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (bcb *BlockerCreateBulk) SaveX(ctx context.Context) []*Blocker {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
