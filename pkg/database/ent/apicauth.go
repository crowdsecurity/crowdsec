// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/apicauth"
)

// ApicAuth is the model entity for the ApicAuth schema.
type ApicAuth struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"token,omitempty"`
	// Expiration holds the value of the "expiration" field.
	Expiration time.Time `json:"expiration,omitempty"`
	// Singleton holds the value of the "singleton" field.
	Singleton    string `json:"singleton,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApicAuth) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apicauth.FieldID:
			values[i] = new(sql.NullInt64)
		case apicauth.FieldToken, apicauth.FieldSingleton:
			values[i] = new(sql.NullString)
		case apicauth.FieldExpiration:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApicAuth fields.
func (aa *ApicAuth) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apicauth.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			aa.ID = int(value.Int64)
		case apicauth.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				aa.Token = value.String
			}
		case apicauth.FieldExpiration:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiration", values[i])
			} else if value.Valid {
				aa.Expiration = value.Time
			}
		case apicauth.FieldSingleton:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field singleton", values[i])
			} else if value.Valid {
				aa.Singleton = value.String
			}
		default:
			aa.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ApicAuth.
// This includes values selected through modifiers, order, etc.
func (aa *ApicAuth) Value(name string) (ent.Value, error) {
	return aa.selectValues.Get(name)
}

// Update returns a builder for updating this ApicAuth.
// Note that you need to call ApicAuth.Unwrap() before calling this method if this ApicAuth
// was returned from a transaction, and the transaction was committed or rolled back.
func (aa *ApicAuth) Update() *ApicAuthUpdateOne {
	return NewApicAuthClient(aa.config).UpdateOne(aa)
}

// Unwrap unwraps the ApicAuth entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (aa *ApicAuth) Unwrap() *ApicAuth {
	_tx, ok := aa.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApicAuth is not a transactional entity")
	}
	aa.config.driver = _tx.drv
	return aa
}

// String implements the fmt.Stringer.
func (aa *ApicAuth) String() string {
	var builder strings.Builder
	builder.WriteString("ApicAuth(")
	builder.WriteString(fmt.Sprintf("id=%v, ", aa.ID))
	builder.WriteString("token=")
	builder.WriteString(aa.Token)
	builder.WriteString(", ")
	builder.WriteString("expiration=")
	builder.WriteString(aa.Expiration.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("singleton=")
	builder.WriteString(aa.Singleton)
	builder.WriteByte(')')
	return builder.String()
}

// ApicAuths is a parsable slice of ApicAuth.
type ApicAuths []*ApicAuth
