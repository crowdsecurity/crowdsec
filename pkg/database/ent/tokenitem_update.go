// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/predicate"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/tokenitem"
)

// TokenItemUpdate is the builder for updating TokenItem entities.
type TokenItemUpdate struct {
	config
	hooks    []Hook
	mutation *TokenItemMutation
}

// Where appends a list predicates to the TokenItemUpdate builder.
func (tiu *TokenItemUpdate) Where(ps ...predicate.TokenItem) *TokenItemUpdate {
	tiu.mutation.Where(ps...)
	return tiu
}

// SetUpdatedAt sets the "updated_at" field.
func (tiu *TokenItemUpdate) SetUpdatedAt(t time.Time) *TokenItemUpdate {
	tiu.mutation.SetUpdatedAt(t)
	return tiu
}

// SetValue sets the "value" field.
func (tiu *TokenItemUpdate) SetValue(s string) *TokenItemUpdate {
	tiu.mutation.SetValue(s)
	return tiu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (tiu *TokenItemUpdate) SetNillableValue(s *string) *TokenItemUpdate {
	if s != nil {
		tiu.SetValue(*s)
	}
	return tiu
}

// Mutation returns the TokenItemMutation object of the builder.
func (tiu *TokenItemUpdate) Mutation() *TokenItemMutation {
	return tiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tiu *TokenItemUpdate) Save(ctx context.Context) (int, error) {
	tiu.defaults()
	return withHooks(ctx, tiu.sqlSave, tiu.mutation, tiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiu *TokenItemUpdate) SaveX(ctx context.Context) int {
	affected, err := tiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tiu *TokenItemUpdate) Exec(ctx context.Context) error {
	_, err := tiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiu *TokenItemUpdate) ExecX(ctx context.Context) {
	if err := tiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiu *TokenItemUpdate) defaults() {
	if _, ok := tiu.mutation.UpdatedAt(); !ok {
		v := tokenitem.UpdateDefaultUpdatedAt()
		tiu.mutation.SetUpdatedAt(v)
	}
}

func (tiu *TokenItemUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tokenitem.Table, tokenitem.Columns, sqlgraph.NewFieldSpec(tokenitem.FieldID, field.TypeInt))
	if ps := tiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiu.mutation.UpdatedAt(); ok {
		_spec.SetField(tokenitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tiu.mutation.Value(); ok {
		_spec.SetField(tokenitem.FieldValue, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokenitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tiu.mutation.done = true
	return n, nil
}

// TokenItemUpdateOne is the builder for updating a single TokenItem entity.
type TokenItemUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TokenItemMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tiuo *TokenItemUpdateOne) SetUpdatedAt(t time.Time) *TokenItemUpdateOne {
	tiuo.mutation.SetUpdatedAt(t)
	return tiuo
}

// SetValue sets the "value" field.
func (tiuo *TokenItemUpdateOne) SetValue(s string) *TokenItemUpdateOne {
	tiuo.mutation.SetValue(s)
	return tiuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (tiuo *TokenItemUpdateOne) SetNillableValue(s *string) *TokenItemUpdateOne {
	if s != nil {
		tiuo.SetValue(*s)
	}
	return tiuo
}

// Mutation returns the TokenItemMutation object of the builder.
func (tiuo *TokenItemUpdateOne) Mutation() *TokenItemMutation {
	return tiuo.mutation
}

// Where appends a list predicates to the TokenItemUpdate builder.
func (tiuo *TokenItemUpdateOne) Where(ps ...predicate.TokenItem) *TokenItemUpdateOne {
	tiuo.mutation.Where(ps...)
	return tiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tiuo *TokenItemUpdateOne) Select(field string, fields ...string) *TokenItemUpdateOne {
	tiuo.fields = append([]string{field}, fields...)
	return tiuo
}

// Save executes the query and returns the updated TokenItem entity.
func (tiuo *TokenItemUpdateOne) Save(ctx context.Context) (*TokenItem, error) {
	tiuo.defaults()
	return withHooks(ctx, tiuo.sqlSave, tiuo.mutation, tiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tiuo *TokenItemUpdateOne) SaveX(ctx context.Context) *TokenItem {
	node, err := tiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tiuo *TokenItemUpdateOne) Exec(ctx context.Context) error {
	_, err := tiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tiuo *TokenItemUpdateOne) ExecX(ctx context.Context) {
	if err := tiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tiuo *TokenItemUpdateOne) defaults() {
	if _, ok := tiuo.mutation.UpdatedAt(); !ok {
		v := tokenitem.UpdateDefaultUpdatedAt()
		tiuo.mutation.SetUpdatedAt(v)
	}
}

func (tiuo *TokenItemUpdateOne) sqlSave(ctx context.Context) (_node *TokenItem, err error) {
	_spec := sqlgraph.NewUpdateSpec(tokenitem.Table, tokenitem.Columns, sqlgraph.NewFieldSpec(tokenitem.FieldID, field.TypeInt))
	id, ok := tiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TokenItem.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tokenitem.FieldID)
		for _, f := range fields {
			if !tokenitem.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tokenitem.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tiuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tokenitem.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := tiuo.mutation.Value(); ok {
		_spec.SetField(tokenitem.FieldValue, field.TypeString, value)
	}
	_node = &TokenItem{config: tiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tokenitem.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tiuo.mutation.done = true
	return _node, nil
}
