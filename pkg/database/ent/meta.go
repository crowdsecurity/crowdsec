// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/crowdsecurity/crowdsec/pkg/database/ent/alert"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/meta"
	"github.com/facebook/ent/dialect/sql"
)

// Meta is the model entity for the Meta schema.
type Meta struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MetaQuery when eager-loading is set.
	Edges       MetaEdges `json:"edges"`
	alert_metas *int
}

// MetaEdges holds the relations/edges for other nodes in the graph.
type MetaEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Alert
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MetaEdges) OwnerOrErr() (*Alert, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: alert.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Meta) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // key
		&sql.NullString{}, // value
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Meta) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // alert_metas
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Meta fields.
func (m *Meta) assignValues(values ...interface{}) error {
	if m, n := len(values), len(meta.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		m.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		m.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field key", values[2])
	} else if value.Valid {
		m.Key = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field value", values[3])
	} else if value.Valid {
		m.Value = value.String
	}
	values = values[4:]
	if len(values) == len(meta.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field alert_metas", value)
		} else if value.Valid {
			m.alert_metas = new(int)
			*m.alert_metas = int(value.Int64)
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Meta.
func (m *Meta) QueryOwner() *AlertQuery {
	return (&MetaClient{config: m.config}).QueryOwner(m)
}

// Update returns a builder for updating this Meta.
// Note that, you need to call Meta.Unwrap() before calling this method, if this Meta
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Meta) Update() *MetaUpdateOne {
	return (&MetaClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Meta) Unwrap() *Meta {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Meta is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Meta) String() string {
	var builder strings.Builder
	builder.WriteString("Meta(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", key=")
	builder.WriteString(m.Key)
	builder.WriteString(", value=")
	builder.WriteString(m.Value)
	builder.WriteByte(')')
	return builder.String()
}

// MetaSlice is a parsable slice of Meta.
type MetaSlice []*Meta

func (m MetaSlice) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
