// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/crowdsecurity/crowdsec/pkg/database/ent/blocker"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// BlockerUpdate is the builder for updating Blocker entities.
type BlockerUpdate struct {
	config
	hooks      []Hook
	mutation   *BlockerMutation
	predicates []predicate.Blocker
}

// Where adds a new predicate for the builder.
func (bu *BlockerUpdate) Where(ps ...predicate.Blocker) *BlockerUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetCreatedAt sets the created_at field.
func (bu *BlockerUpdate) SetCreatedAt(t time.Time) *BlockerUpdate {
	bu.mutation.SetCreatedAt(t)
	return bu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (bu *BlockerUpdate) SetNillableCreatedAt(t *time.Time) *BlockerUpdate {
	if t != nil {
		bu.SetCreatedAt(*t)
	}
	return bu
}

// SetUpdatedAt sets the updated_at field.
func (bu *BlockerUpdate) SetUpdatedAt(t time.Time) *BlockerUpdate {
	bu.mutation.SetUpdatedAt(t)
	return bu
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (bu *BlockerUpdate) SetNillableUpdatedAt(t *time.Time) *BlockerUpdate {
	if t != nil {
		bu.SetUpdatedAt(*t)
	}
	return bu
}

// SetName sets the name field.
func (bu *BlockerUpdate) SetName(s string) *BlockerUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetAPIKey sets the api_key field.
func (bu *BlockerUpdate) SetAPIKey(s string) *BlockerUpdate {
	bu.mutation.SetAPIKey(s)
	return bu
}

// SetRevoked sets the revoked field.
func (bu *BlockerUpdate) SetRevoked(b bool) *BlockerUpdate {
	bu.mutation.SetRevoked(b)
	return bu
}

// SetIPAddress sets the ip_address field.
func (bu *BlockerUpdate) SetIPAddress(s string) *BlockerUpdate {
	bu.mutation.SetIPAddress(s)
	return bu
}

// SetNillableIPAddress sets the ip_address field if the given value is not nil.
func (bu *BlockerUpdate) SetNillableIPAddress(s *string) *BlockerUpdate {
	if s != nil {
		bu.SetIPAddress(*s)
	}
	return bu
}

// ClearIPAddress clears the value of ip_address.
func (bu *BlockerUpdate) ClearIPAddress() *BlockerUpdate {
	bu.mutation.ClearIPAddress()
	return bu
}

// SetType sets the type field.
func (bu *BlockerUpdate) SetType(s string) *BlockerUpdate {
	bu.mutation.SetType(s)
	return bu
}

// SetNillableType sets the type field if the given value is not nil.
func (bu *BlockerUpdate) SetNillableType(s *string) *BlockerUpdate {
	if s != nil {
		bu.SetType(*s)
	}
	return bu
}

// ClearType clears the value of type.
func (bu *BlockerUpdate) ClearType() *BlockerUpdate {
	bu.mutation.ClearType()
	return bu
}

// SetUntil sets the until field.
func (bu *BlockerUpdate) SetUntil(t time.Time) *BlockerUpdate {
	bu.mutation.SetUntil(t)
	return bu
}

// SetNillableUntil sets the until field if the given value is not nil.
func (bu *BlockerUpdate) SetNillableUntil(t *time.Time) *BlockerUpdate {
	if t != nil {
		bu.SetUntil(*t)
	}
	return bu
}

// ClearUntil clears the value of until.
func (bu *BlockerUpdate) ClearUntil() *BlockerUpdate {
	bu.mutation.ClearUntil()
	return bu
}

// SetLastPull sets the last_pull field.
func (bu *BlockerUpdate) SetLastPull(t time.Time) *BlockerUpdate {
	bu.mutation.SetLastPull(t)
	return bu
}

// SetNillableLastPull sets the last_pull field if the given value is not nil.
func (bu *BlockerUpdate) SetNillableLastPull(t *time.Time) *BlockerUpdate {
	if t != nil {
		bu.SetLastPull(*t)
	}
	return bu
}

// Mutation returns the BlockerMutation object of the builder.
func (bu *BlockerUpdate) Mutation() *BlockerMutation {
	return bu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BlockerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BlockerUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BlockerUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BlockerUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BlockerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blocker.Table,
			Columns: blocker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocker.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldCreatedAt,
		})
	}
	if value, ok := bu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldUpdatedAt,
		})
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldName,
		})
	}
	if value, ok := bu.mutation.APIKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldAPIKey,
		})
	}
	if value, ok := bu.mutation.Revoked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: blocker.FieldRevoked,
		})
	}
	if value, ok := bu.mutation.IPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldIPAddress,
		})
	}
	if bu.mutation.IPAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: blocker.FieldIPAddress,
		})
	}
	if value, ok := bu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldType,
		})
	}
	if bu.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: blocker.FieldType,
		})
	}
	if value, ok := bu.mutation.Until(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldUntil,
		})
	}
	if bu.mutation.UntilCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: blocker.FieldUntil,
		})
	}
	if value, ok := bu.mutation.LastPull(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldLastPull,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocker.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BlockerUpdateOne is the builder for updating a single Blocker entity.
type BlockerUpdateOne struct {
	config
	hooks    []Hook
	mutation *BlockerMutation
}

// SetCreatedAt sets the created_at field.
func (buo *BlockerUpdateOne) SetCreatedAt(t time.Time) *BlockerUpdateOne {
	buo.mutation.SetCreatedAt(t)
	return buo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (buo *BlockerUpdateOne) SetNillableCreatedAt(t *time.Time) *BlockerUpdateOne {
	if t != nil {
		buo.SetCreatedAt(*t)
	}
	return buo
}

// SetUpdatedAt sets the updated_at field.
func (buo *BlockerUpdateOne) SetUpdatedAt(t time.Time) *BlockerUpdateOne {
	buo.mutation.SetUpdatedAt(t)
	return buo
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (buo *BlockerUpdateOne) SetNillableUpdatedAt(t *time.Time) *BlockerUpdateOne {
	if t != nil {
		buo.SetUpdatedAt(*t)
	}
	return buo
}

// SetName sets the name field.
func (buo *BlockerUpdateOne) SetName(s string) *BlockerUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetAPIKey sets the api_key field.
func (buo *BlockerUpdateOne) SetAPIKey(s string) *BlockerUpdateOne {
	buo.mutation.SetAPIKey(s)
	return buo
}

// SetRevoked sets the revoked field.
func (buo *BlockerUpdateOne) SetRevoked(b bool) *BlockerUpdateOne {
	buo.mutation.SetRevoked(b)
	return buo
}

// SetIPAddress sets the ip_address field.
func (buo *BlockerUpdateOne) SetIPAddress(s string) *BlockerUpdateOne {
	buo.mutation.SetIPAddress(s)
	return buo
}

// SetNillableIPAddress sets the ip_address field if the given value is not nil.
func (buo *BlockerUpdateOne) SetNillableIPAddress(s *string) *BlockerUpdateOne {
	if s != nil {
		buo.SetIPAddress(*s)
	}
	return buo
}

// ClearIPAddress clears the value of ip_address.
func (buo *BlockerUpdateOne) ClearIPAddress() *BlockerUpdateOne {
	buo.mutation.ClearIPAddress()
	return buo
}

// SetType sets the type field.
func (buo *BlockerUpdateOne) SetType(s string) *BlockerUpdateOne {
	buo.mutation.SetType(s)
	return buo
}

// SetNillableType sets the type field if the given value is not nil.
func (buo *BlockerUpdateOne) SetNillableType(s *string) *BlockerUpdateOne {
	if s != nil {
		buo.SetType(*s)
	}
	return buo
}

// ClearType clears the value of type.
func (buo *BlockerUpdateOne) ClearType() *BlockerUpdateOne {
	buo.mutation.ClearType()
	return buo
}

// SetUntil sets the until field.
func (buo *BlockerUpdateOne) SetUntil(t time.Time) *BlockerUpdateOne {
	buo.mutation.SetUntil(t)
	return buo
}

// SetNillableUntil sets the until field if the given value is not nil.
func (buo *BlockerUpdateOne) SetNillableUntil(t *time.Time) *BlockerUpdateOne {
	if t != nil {
		buo.SetUntil(*t)
	}
	return buo
}

// ClearUntil clears the value of until.
func (buo *BlockerUpdateOne) ClearUntil() *BlockerUpdateOne {
	buo.mutation.ClearUntil()
	return buo
}

// SetLastPull sets the last_pull field.
func (buo *BlockerUpdateOne) SetLastPull(t time.Time) *BlockerUpdateOne {
	buo.mutation.SetLastPull(t)
	return buo
}

// SetNillableLastPull sets the last_pull field if the given value is not nil.
func (buo *BlockerUpdateOne) SetNillableLastPull(t *time.Time) *BlockerUpdateOne {
	if t != nil {
		buo.SetLastPull(*t)
	}
	return buo
}

// Mutation returns the BlockerMutation object of the builder.
func (buo *BlockerUpdateOne) Mutation() *BlockerMutation {
	return buo.mutation
}

// Save executes the query and returns the updated entity.
func (buo *BlockerUpdateOne) Save(ctx context.Context) (*Blocker, error) {
	var (
		err  error
		node *Blocker
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BlockerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BlockerUpdateOne) SaveX(ctx context.Context) *Blocker {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BlockerUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BlockerUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BlockerUpdateOne) sqlSave(ctx context.Context) (b *Blocker, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   blocker.Table,
			Columns: blocker.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: blocker.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Blocker.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldCreatedAt,
		})
	}
	if value, ok := buo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldUpdatedAt,
		})
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldName,
		})
	}
	if value, ok := buo.mutation.APIKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldAPIKey,
		})
	}
	if value, ok := buo.mutation.Revoked(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: blocker.FieldRevoked,
		})
	}
	if value, ok := buo.mutation.IPAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldIPAddress,
		})
	}
	if buo.mutation.IPAddressCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: blocker.FieldIPAddress,
		})
	}
	if value, ok := buo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: blocker.FieldType,
		})
	}
	if buo.mutation.TypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: blocker.FieldType,
		})
	}
	if value, ok := buo.mutation.Until(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldUntil,
		})
	}
	if buo.mutation.UntilCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: blocker.FieldUntil,
		})
	}
	if value, ok := buo.mutation.LastPull(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: blocker.FieldLastPull,
		})
	}
	b = &Blocker{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{blocker.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
