// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/apicauth"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/predicate"
)

// ApicAuthUpdate is the builder for updating ApicAuth entities.
type ApicAuthUpdate struct {
	config
	hooks    []Hook
	mutation *ApicAuthMutation
}

// Where appends a list predicates to the ApicAuthUpdate builder.
func (aau *ApicAuthUpdate) Where(ps ...predicate.ApicAuth) *ApicAuthUpdate {
	aau.mutation.Where(ps...)
	return aau
}

// SetToken sets the "token" field.
func (aau *ApicAuthUpdate) SetToken(s string) *ApicAuthUpdate {
	aau.mutation.SetToken(s)
	return aau
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (aau *ApicAuthUpdate) SetNillableToken(s *string) *ApicAuthUpdate {
	if s != nil {
		aau.SetToken(*s)
	}
	return aau
}

// SetExpiration sets the "expiration" field.
func (aau *ApicAuthUpdate) SetExpiration(t time.Time) *ApicAuthUpdate {
	aau.mutation.SetExpiration(t)
	return aau
}

// SetNillableExpiration sets the "expiration" field if the given value is not nil.
func (aau *ApicAuthUpdate) SetNillableExpiration(t *time.Time) *ApicAuthUpdate {
	if t != nil {
		aau.SetExpiration(*t)
	}
	return aau
}

// Mutation returns the ApicAuthMutation object of the builder.
func (aau *ApicAuthUpdate) Mutation() *ApicAuthMutation {
	return aau.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aau *ApicAuthUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, aau.sqlSave, aau.mutation, aau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aau *ApicAuthUpdate) SaveX(ctx context.Context) int {
	affected, err := aau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aau *ApicAuthUpdate) Exec(ctx context.Context) error {
	_, err := aau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aau *ApicAuthUpdate) ExecX(ctx context.Context) {
	if err := aau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aau *ApicAuthUpdate) check() error {
	if v, ok := aau.mutation.Token(); ok {
		if err := apicauth.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "ApicAuth.token": %w`, err)}
		}
	}
	return nil
}

func (aau *ApicAuthUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := aau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(apicauth.Table, apicauth.Columns, sqlgraph.NewFieldSpec(apicauth.FieldID, field.TypeInt))
	if ps := aau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aau.mutation.Token(); ok {
		_spec.SetField(apicauth.FieldToken, field.TypeString, value)
	}
	if value, ok := aau.mutation.Expiration(); ok {
		_spec.SetField(apicauth.FieldExpiration, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apicauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aau.mutation.done = true
	return n, nil
}

// ApicAuthUpdateOne is the builder for updating a single ApicAuth entity.
type ApicAuthUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ApicAuthMutation
}

// SetToken sets the "token" field.
func (aauo *ApicAuthUpdateOne) SetToken(s string) *ApicAuthUpdateOne {
	aauo.mutation.SetToken(s)
	return aauo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (aauo *ApicAuthUpdateOne) SetNillableToken(s *string) *ApicAuthUpdateOne {
	if s != nil {
		aauo.SetToken(*s)
	}
	return aauo
}

// SetExpiration sets the "expiration" field.
func (aauo *ApicAuthUpdateOne) SetExpiration(t time.Time) *ApicAuthUpdateOne {
	aauo.mutation.SetExpiration(t)
	return aauo
}

// SetNillableExpiration sets the "expiration" field if the given value is not nil.
func (aauo *ApicAuthUpdateOne) SetNillableExpiration(t *time.Time) *ApicAuthUpdateOne {
	if t != nil {
		aauo.SetExpiration(*t)
	}
	return aauo
}

// Mutation returns the ApicAuthMutation object of the builder.
func (aauo *ApicAuthUpdateOne) Mutation() *ApicAuthMutation {
	return aauo.mutation
}

// Where appends a list predicates to the ApicAuthUpdate builder.
func (aauo *ApicAuthUpdateOne) Where(ps ...predicate.ApicAuth) *ApicAuthUpdateOne {
	aauo.mutation.Where(ps...)
	return aauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aauo *ApicAuthUpdateOne) Select(field string, fields ...string) *ApicAuthUpdateOne {
	aauo.fields = append([]string{field}, fields...)
	return aauo
}

// Save executes the query and returns the updated ApicAuth entity.
func (aauo *ApicAuthUpdateOne) Save(ctx context.Context) (*ApicAuth, error) {
	return withHooks(ctx, aauo.sqlSave, aauo.mutation, aauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aauo *ApicAuthUpdateOne) SaveX(ctx context.Context) *ApicAuth {
	node, err := aauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aauo *ApicAuthUpdateOne) Exec(ctx context.Context) error {
	_, err := aauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aauo *ApicAuthUpdateOne) ExecX(ctx context.Context) {
	if err := aauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aauo *ApicAuthUpdateOne) check() error {
	if v, ok := aauo.mutation.Token(); ok {
		if err := apicauth.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`ent: validator failed for field "ApicAuth.token": %w`, err)}
		}
	}
	return nil
}

func (aauo *ApicAuthUpdateOne) sqlSave(ctx context.Context) (_node *ApicAuth, err error) {
	if err := aauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(apicauth.Table, apicauth.Columns, sqlgraph.NewFieldSpec(apicauth.FieldID, field.TypeInt))
	id, ok := aauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ApicAuth.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, apicauth.FieldID)
		for _, f := range fields {
			if !apicauth.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != apicauth.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aauo.mutation.Token(); ok {
		_spec.SetField(apicauth.FieldToken, field.TypeString, value)
	}
	if value, ok := aauo.mutation.Expiration(); ok {
		_spec.SetField(apicauth.FieldExpiration, field.TypeTime, value)
	}
	_node = &ApicAuth{config: aauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{apicauth.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aauo.mutation.done = true
	return _node, nil
}
