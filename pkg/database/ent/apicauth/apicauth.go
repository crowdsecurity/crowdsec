// Code generated by ent, DO NOT EDIT.

package apicauth

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the apicauth type in the database.
	Label = "apic_auth"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldExpiration holds the string denoting the expiration field in the database.
	FieldExpiration = "expiration"
	// FieldSingleton holds the string denoting the singleton field in the database.
	FieldSingleton = "singleton"
	// Table holds the table name of the apicauth in the database.
	Table = "apic_auths"
)

// Columns holds all SQL columns for apicauth fields.
var Columns = []string{
	FieldID,
	FieldToken,
	FieldExpiration,
	FieldSingleton,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
)

// OrderOption defines the ordering options for the ApicAuth queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// ByExpiration orders the results by the expiration field.
func ByExpiration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiration, opts...).ToFunc()
}

// BySingleton orders the results by the singleton field.
func BySingleton(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSingleton, opts...).ToFunc()
}
