// Code generated by ent, DO NOT EDIT.

package apicauth

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/crowdsecurity/crowdsec/pkg/database/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldLTE(FieldID, id))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEQ(FieldToken, v))
}

// Expiration applies equality check predicate on the "expiration" field. It's identical to ExpirationEQ.
func Expiration(v time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEQ(FieldExpiration, v))
}

// Singleton applies equality check predicate on the "singleton" field. It's identical to SingletonEQ.
func Singleton(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEQ(FieldSingleton, v))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldContainsFold(FieldToken, v))
}

// ExpirationEQ applies the EQ predicate on the "expiration" field.
func ExpirationEQ(v time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEQ(FieldExpiration, v))
}

// ExpirationNEQ applies the NEQ predicate on the "expiration" field.
func ExpirationNEQ(v time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldNEQ(FieldExpiration, v))
}

// ExpirationIn applies the In predicate on the "expiration" field.
func ExpirationIn(vs ...time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldIn(FieldExpiration, vs...))
}

// ExpirationNotIn applies the NotIn predicate on the "expiration" field.
func ExpirationNotIn(vs ...time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldNotIn(FieldExpiration, vs...))
}

// ExpirationGT applies the GT predicate on the "expiration" field.
func ExpirationGT(v time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldGT(FieldExpiration, v))
}

// ExpirationGTE applies the GTE predicate on the "expiration" field.
func ExpirationGTE(v time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldGTE(FieldExpiration, v))
}

// ExpirationLT applies the LT predicate on the "expiration" field.
func ExpirationLT(v time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldLT(FieldExpiration, v))
}

// ExpirationLTE applies the LTE predicate on the "expiration" field.
func ExpirationLTE(v time.Time) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldLTE(FieldExpiration, v))
}

// SingletonEQ applies the EQ predicate on the "singleton" field.
func SingletonEQ(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEQ(FieldSingleton, v))
}

// SingletonNEQ applies the NEQ predicate on the "singleton" field.
func SingletonNEQ(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldNEQ(FieldSingleton, v))
}

// SingletonIn applies the In predicate on the "singleton" field.
func SingletonIn(vs ...string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldIn(FieldSingleton, vs...))
}

// SingletonNotIn applies the NotIn predicate on the "singleton" field.
func SingletonNotIn(vs ...string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldNotIn(FieldSingleton, vs...))
}

// SingletonGT applies the GT predicate on the "singleton" field.
func SingletonGT(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldGT(FieldSingleton, v))
}

// SingletonGTE applies the GTE predicate on the "singleton" field.
func SingletonGTE(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldGTE(FieldSingleton, v))
}

// SingletonLT applies the LT predicate on the "singleton" field.
func SingletonLT(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldLT(FieldSingleton, v))
}

// SingletonLTE applies the LTE predicate on the "singleton" field.
func SingletonLTE(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldLTE(FieldSingleton, v))
}

// SingletonContains applies the Contains predicate on the "singleton" field.
func SingletonContains(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldContains(FieldSingleton, v))
}

// SingletonHasPrefix applies the HasPrefix predicate on the "singleton" field.
func SingletonHasPrefix(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldHasPrefix(FieldSingleton, v))
}

// SingletonHasSuffix applies the HasSuffix predicate on the "singleton" field.
func SingletonHasSuffix(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldHasSuffix(FieldSingleton, v))
}

// SingletonEqualFold applies the EqualFold predicate on the "singleton" field.
func SingletonEqualFold(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldEqualFold(FieldSingleton, v))
}

// SingletonContainsFold applies the ContainsFold predicate on the "singleton" field.
func SingletonContainsFold(v string) predicate.ApicAuth {
	return predicate.ApicAuth(sql.FieldContainsFold(FieldSingleton, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApicAuth) predicate.ApicAuth {
	return predicate.ApicAuth(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApicAuth) predicate.ApicAuth {
	return predicate.ApicAuth(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApicAuth) predicate.ApicAuth {
	return predicate.ApicAuth(sql.NotPredicates(p))
}
