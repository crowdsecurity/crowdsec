trigger:
  tags:
    include:
      - "v*"
  branches:
    exclude:
      - "*"

pool:
  vmImage: windows-latest

stages:
  - stage: Build
    jobs:
      - job:
        displayName: "Build"
        steps:
          - task: DotNetCoreCLI@2
            displayName: "Install SignClient"
            inputs:
              command: 'custom'
              custom: 'tool'
              arguments: 'install --global SignClient --version 1.3.155'
          - task: GoTool@0
            displayName: "Install Go 1.17"
            inputs:
                version: '1.17'
          - pwsh: |
              make windows_installer
            displayName: "Build Crowdsec installer"

          - task: AzureKeyVault@2
            inputs:
              azureSubscription: 'Azure subscription 1(8a93ab40-7e99-445e-ad47-0f6a3e2ef546)'
              KeyVaultName: 'CodeSigningSecrets'
              SecretsFilter: 'CodeSigningUser,CodeSigningPassword'
              RunAsPreJob: false

          - task: DownloadSEcureFile@1
            inputs:
              secureFile: appsettings.json

          - pwsh: |
              SignClient.exe Sign  --name "crowdsec.msi" `
              --input "*.exe,dll" --config (Join-Path -Path $(Agent.TempDirectory) -ChildPath "appsettings.json") `
              --user $(CodeSigningUser) --secret '$(CodeSigningPassword)'
            displayName: "Sign crowdsec installer"

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.Repository.LocalPath)\\crowdsec.msi'
              ArtifactName: 'crowdsec.msi'
              publishLocation: 'Container'
            displayName: "Upload MSI artifact"
  - stage: Publish
    dependsOn: Build
    jobs:
      - deployment: "Publish"
        displayName: "Publish to GitHub"
        environment: github-cs-windows-firewall-bouncer
        strategy:
          runOnce:
            deploy:
              steps:
                - bash: |
                    tag=$(curl -H "Accept: application/vnd.github.v3+json"   https://api.github.com/repos/crowdsecurity/crowdsec/releases | jq -r '. | map(select(.prerelease==true)) | sort_by(.created_at) | reverse | .[0].tag_name')
                    echo "##vso[task.setvariable variable=LatestPreRelease;isOutput=true]$tag"
                  name: GetLatestPrelease
                - task: GitHubRelease@1
                  inputs:
                    gitHubConnection: "github.com_blotus"
                    repositoryName: '$(Build.Repository.Name)'
                    action: 'edit'
                    tag: '$(GetLatestPrelease.LatestPreRelease)'
                    assetUploadMode: 'replace'
                    isPreRelease: true #we force prerelease because the pipeline is invoked on tag creation, which happens when we do a prerelease
                    #the .. is an ugly hack, but I can't find the var that gives D:\a\1 ...
                    assets: |
                      $(Build.ArtifactStagingDirectory)\..\crowdsec.msi
                  #condition: ne(variables['GetLatestPrelease.LatestPreRelease'], '')
                  condition: eq('a', 'b')

