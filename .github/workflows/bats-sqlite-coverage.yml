name: Functional tests with sqlite

on:
  workflow_call:

jobs:

  build:
    name: "Build + tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:

    - name: "Force machineid"
      run: |
          sudo chmod +w /etc/machine-id
          echo githubciXXXXXXXXXXXXXXXXXXXXXXXX | sudo tee /etc/machine-id

    - name: "Set up Go 1.17"
      uses: actions/setup-go@v3
      with:
        go-version: 1.17
      id: go

    - name: "Clone CrowdSec"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: "Install bats dependencies"
      run: |
        sudo apt install -y -qq build-essential daemonize jq netcat-openbsd
        go install github.com/mikefarah/yq/v4@latest
        go install github.com/cloudflare/cfssl/cmd/cfssl@latest
        go install github.com/cloudflare/cfssl/cmd/cfssljson@latest
        go install github.com/wadey/gocovmerge@latest
        sudo cp -u ~/go/bin/yq ~/go/bin/gocovmerge ~/go/bin/cfssl ~/go/bin/cfssljson /usr/local/bin/

    - name: "Build crowdsec and fixture"
      run: TEST_COVERAGE=true make bats-clean bats-build bats-fixture

    - name: "Run tests"
      run: |
        TEST_COVERAGE=true make bats-test

    - name: "Show crowdsec logs"
      run:
        for file in $(find ./tests/local/var/log -type f); do echo ">>>>> $file"; cat $file; echo; done
      if: ${{ always() }}

    - name: Upload crowdsec coverage to codecov
      uses: codecov/codecov-action@v2
      with:
        files: ./tests/local/var/lib/coverage/coverage-crowdsec.out
        flags: func-crowdsec

    - name: Upload cscli coverage to codecov
      uses: codecov/codecov-action@v2
      with:
        files: ./tests/local/var/lib/coverage/coverage-cscli.out
        flags: func-cscli

