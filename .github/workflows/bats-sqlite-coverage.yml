name: Functional tests (sqlite)

on:
  workflow_call:

env:
  PREFIX_TEST_NAMES_WITH_FILE: true
  TEST_COVERAGE: true

jobs:
  build:
    strategy:
      matrix:
        go-version: ["1.21.6"]

    name: "Build + tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:

    - name: "Force machineid"
      run: |
          sudo chmod +w /etc/machine-id
          echo githubciXXXXXXXXXXXXXXXXXXXXXXXX | sudo tee /etc/machine-id

    - name: "Check out CrowdSec repository"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: "Set up Go ${{ matrix.go-version }}"
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: "Install bats dependencies"
      env:
        GOBIN: /usr/local/bin
      run: |
        sudo apt -qq -y -o=Dpkg::Use-Pty=0 install build-essential daemonize jq libre2-dev

    - name: "Build crowdsec and fixture"
      run: |
        make clean bats-build bats-fixture BUILD_STATIC=1

    - name: "Run tests"
      run: make bats-test

    - name: "Collect coverage data"
      run: |
        go tool covdata textfmt -i test/coverage -o coverage-bats-raw.out
        # filter out unwanted packages, should match the argument to "go-acc --ignore"
        grep -v \
          -e '/pkg/database' \
          -e '/plugins/notifications' \
          -e '/pkg/protobufs' \
          -e '/pkg/cwversions' \
          -e '/pkg/models' \
          < coverage-bats-raw.out \
          > coverage-bats.out

    #
    # In case you need to inspect the database status after the failure of a given test
    #
    # - name: "Run specified tests"
    #   run: ./test/run-tests test/bats/<filename>.bats -f "<test name>"

    - name: "Show database dump"
      run: |
        ./test/instance-crowdsec stop
        sqlite3 ./test/local/var/lib/crowdsec/data/crowdsec.db '.dump'
      if: ${{ always() }}

    - name: "Show stack traces"
      run: for file in $(find /tmp/crowdsec-crash.*.txt); do echo ">>>>> $file"; cat $file; echo; done
      if: ${{ always() }}

    - name: "Show crowdsec logs"
      run: for file in $(find ./test/local/var/log -type f); do echo ">>>>> $file"; cat $file; echo; done
      if: ${{ always() }}

    - name: Upload crowdsec coverage to codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage-bats.out
        flags: bats
