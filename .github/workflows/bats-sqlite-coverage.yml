name: (sub) Bats / sqlite + coverage

on:
  workflow_call:
    secrets:
      CODECOV_TOKEN:
        required: true

env:
  TEST_COVERAGE: true

jobs:
  build:
    name: "Functional tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:

    - name: "Force machineid"
      run: |
          sudo chmod +w /etc/machine-id
          echo githubciXXXXXXXXXXXXXXXXXXXXXXXX | sudo tee /etc/machine-id

    - name: "Check out CrowdSec repository"
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      with:
        fetch-depth: 0
        submodules: true

    - name: "Set up Go"
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
      with:
        go-version-file: go.mod

    - name: "Install bats dependencies"
      env:
        GOBIN: /usr/local/bin
      run: |
        sudo apt -qq -y -o=Dpkg::Use-Pty=0 install build-essential daemonize jq libre2-dev

    - name: "Build crowdsec and fixture"
      run: |
        make clean bats-build bats-fixture BUILD_STATIC=1

    - name: Generate codecov configuration
      run: |
          .github/generate-codecov-yml.sh >> .github/codecov.yml

    - name: "Run tests"
      run: ./test/run-tests ./test/bats --formatter $(pwd)/test/lib/color-formatter

    - name: "Collect coverage data"
      run: |
        go tool covdata textfmt -i test/coverage -o coverage-bats.out

    #
    # In case you need to inspect the database status after the failure of a given test
    #
    # - name: "Run specified tests"
    #   run: ./test/run-tests test/bats/<filename>.bats -f "<test name>"

    - name: "Show database dump"
      run: |
        ./test/instance-crowdsec stop
        sqlite3 ./test/local/var/lib/crowdsec/data/crowdsec.db '.dump'
      if: ${{ always() }}

    - name: "Show stack traces"
      run: for file in $(find /tmp/crowdsec-crash.*.txt); do echo ">>>>> $file"; cat $file; echo; done
      if: ${{ always() }}

    - name: "Show crowdsec logs"
      run: for file in $(find ./test/local/var/log -type f); do echo ">>>>> $file"; cat $file; echo; done
      if: ${{ always() }}

    - name: Upload bats coverage to codecov
      uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00
      with:
        files: ./coverage-bats.out
        flags: bats
        token: ${{ secrets.CODECOV_TOKEN }}
