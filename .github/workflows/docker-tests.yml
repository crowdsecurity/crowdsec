name: Test Docker images

on:
  push:
    branches:
      - master
      - releases/**
    paths-ignore:
      - 'README.md'
  pull_request:
    branches:
      - master
      - releases/**
    paths-ignore:
      - 'README.md'

jobs:
  test_flavor:
    strategy:
      # we could test all the flavors in a single pytest job,
      # but let's split them (and the image build) in multiple runners for performance
      matrix:
        # can be slim, full or debian (no debian slim).
        flavor: ["slim", "debian"]

    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:

      - name: Check out the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
        with:
          buildkitd-config: .github/buildkit.toml

      - name: "Build image"
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: ./Dockerfile${{ matrix.flavor == 'debian' && '.debian' || '' }}
          tags: crowdsecurity/crowdsec:test${{ matrix.flavor == 'full' && '' || '-' }}${{ matrix.flavor == 'full' && '' || matrix.flavor }}
          target: ${{ matrix.flavor == 'debian' && 'full' || matrix.flavor }}
          platforms: linux/amd64
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=min

      - name: "Create Docker network"
        run: docker network create net-test

      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6.4.3
        with:
          version: 0.5.24
          enable-cache: true
          working-directory: "./docker/test"

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "./docker/test/.python-version"

      # running serially to reduce test flakiness
      - name: Lint and run the tests
        run: |
          cd docker/test
          uv sync --all-extras --dev --locked
          uv run ruff check
          uv run basedpyright
          uv run pytest tests -n 1 --durations=0 --color=yes
        env:
          CROWDSEC_TEST_VERSION: test
          CROWDSEC_TEST_FLAVORS: ${{ matrix.flavor }}
          CROWDSEC_TEST_NETWORK: net-test
          CROWDSEC_TEST_TIMEOUT: 90
