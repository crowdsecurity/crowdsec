package clisetup

import (
	"fmt"
	"os"

	"github.com/fatih/color"
	"github.com/spf13/cobra"

	"github.com/crowdsecurity/crowdsec/cmd/crowdsec-cli/args"
	"github.com/crowdsecurity/crowdsec/cmd/crowdsec-cli/clisetup/setup"
)

type acquisitionFlags struct {
	acquisDir string
}

func (f *acquisitionFlags) bind(cmd *cobra.Command) {
	flags := cmd.Flags()
	flags.StringVar(&f.acquisDir, "acquis-dir", "", "Directory for the acquisition configuration")
}

func (cli *cliSetup) newInstallAcquisitionCmd() *cobra.Command {
	var dryRun bool

	f := acquisitionFlags{}

	cmd := &cobra.Command{
		Use:   "install-acquisition [setup_file]",
		Short: "Generate acquisition configuration from a setup file",
		Long: `Generate acquisition configuration from a setup file.

This command reads a setup.yaml specification (typically generated by 'cscli setup detect')
and creates one acquisition file for each listed service.
By default the files are placed in the acquisition directory,
which you can override with --acquis-dir.`,
		Example: `# detect running services, create a setup file
cscli setup detect > setup.yaml

# write configuration files in acquis.d
cscli setup install-acquisition setup.yaml

# write files to a specific directory
cscli setup install-acquisition --acquis-dir /path/to/acquis.d

# dry-run to preview what would be created
cscli setup install-acquisition setup.yaml --dry-run
`,
		Args:              args.ExactArgs(1),
		DisableAutoGenTag: true,
		RunE: func(cmd *cobra.Command, args []string) error {
			inputReader, err := maybeStdinFile(args[0])
			if err != nil {
				return err
			}

			stup, err := setup.ParseSetupYAML(inputReader, true, cli.cfg().Cscli.Color != "no")
			if err != nil {
				return err
			}

			return cli.acquisition(stup.CollectAcquisitionSpecs(), f.acquisDir, dryRun)
		},
	}

	f.bind(cmd)

	flags := cmd.Flags()
	flags.BoolVar(&dryRun, "dry-run", false, "simulate the installation without making any changes")

	return cmd
}

func (cli *cliSetup) acquisition(acquisitionSpecs []setup.AcquisitionSpec, toDir string, dryRun bool) error {
	for _, spec := range acquisitionSpecs {
		if spec.Datasource == nil {
			continue
		}

		cfg := cli.cfg()

		if toDir == "" {
			toDir = cfg.Crowdsec.AcquisitionDirPath
		}

		if toDir == "" {
			return fmt.Errorf("no acquisition directory specified, please use --acquis-dir or set crowdsec_services.acquisition_dir in %q", cfg.FilePath)
		}

		path, err := spec.Path(toDir)
		if err != nil {
			return err
		}

		content, err := spec.ToYAML()
		if err != nil {
			return err
		}

		if dryRun {
			_, _ = fmt.Fprintln(os.Stdout, "(dry run) "+path+"\n"+color.BlueString(string(content)))
			continue
		}

		fmt.Fprintln(os.Stdout, "creating "+path)

		writer, err := spec.Open(toDir)
		if err != nil {
			return err
		}
		defer writer.Close()

		contentWithHeader := spec.AddHeader(writer, content)

		_, err = writer.Write(contentWithHeader)
		if err != nil {
			return fmt.Errorf("writing acquisition to %q: %w", path, err)
		}
	}

	return nil
}
